#!/usr/bin/env ruby
require 'yaml'
require 'empathy/empathy'
require 'fileutils'
require 'optparse'
require 'date'
require 'mysql2'

empathy = Empathy::Empathy.new

class String
    def green
        return "\e[32m#{self}\e[0m"
    end
    def yellow
        return "\e[33m#{self}\e[0m"
    end
    def blue
        return "\e[36m#{self}\e[0m"
    end
end

case ARGV[0]
when 'new','n'
    root = empathy.instance_variable_get(:@gem_root)
    name = ARGV[1]
    puts "-- Creating directory structure for new project #{name}"
    FileUtils.cp_r(root+"/templates/.", name)
    dirs = ['controllers','migrations', 'models', 'views','views/partials', 'views/layouts']
    dirs.each do |dir|
        Dir.mkdir "./#{name}/#{dir}/"
    end
    Dir.glob("#{name}/**/*").each do |entry|
        if !entry.include? "/" then
            puts entry.green
        elsif entry.include? "/" and !entry.include? "." then
            puts "  #{entry}".green
        elsif entry.include? "/" and entry.include? "." then
            puts "    #{entry}".yellow
        end
    end
    File.write "#{name}/.empathy.yaml", File.read("#{root}lib/empathy/empathy.yaml")
    puts " -- Next steps"
    puts "> cd #{name}/".blue
    puts "> yarn".blue
    puts "> npm start".blue

when 'generate','g'
    type = ARGV[1]
    name = ARGV[2]
    actions = ARGV[3..ARGV.length]
    case type
    when 'controller','c'
        if empathy.controller(name, actions)
            puts "Wrote controller to #{name.capitalize}Controller.php"
            puts "Wrote template files to views/#{name}"
        else
            puts "Unable to generate controller. It probably already exists?"
        end

    when 'model','m'
        if empathy.model(name, actions)
            puts "Wrote model to models/#{name.capitalize}.php"
        else
            puts "Unable to create model. It probably already exists?"
        end
    end
        

when 'delete','d','remove'
    type = ARGV[1]
    name = ARGV[2]
    case type
    when 'model','m'
        empathy.remove 'model',name
    when 'controller','c'
        empathy.remove 'controller',name
    end

when 'test'

when 'seed'
    table = ARGV[1]
    if ARGV.length == 1 || !File.exist?("migrations/seed_#{table}.sql")
        puts "invalid seed file"
    else
        config = YAML.load_file(".empathy.yaml")
        db = config['db']['development']
        client = Mysql2::Client.new(:host => db['host'], :username => db['username'], :password => db['password'], :port => db['port'])
        client.select_db(db['database'])
        seed = File.read "migrations/seed_#{table}.sql"
        client.query seed
    end

when 'migrate'
    config = YAML.load_file(".empathy.yaml")
    db = config['db']['development']
    client = Mysql2::Client.new(:host => db['host'], :username => db['username'], :password => db['password'], :port => db['port'])
    begin 
        client.select_db(db['database'])
    rescue Mysql2::Error
        puts "Database #{db['database'].blue} does not exist, creating..."
        client.query "CREATE DATABASE IF NOT EXISTS #{db['database']}"
    end
    Dir['migrations/*.sql'].each do |file|
        migration = File.read "#{file}"
        client.query migration if (file =~ /seed\_/).nil?
    end

when 'version','v'
    puts "Empathy Version: #{Empathy::VERSION}"
    

when 'serve', 'server', 's'
    if !File.exist? "app.php"
        puts "This doesn't seem to be an empathy app. You can create one with empathy new my_app"
    else
        port = ARGV.length == 2 ? ARGV[1] : 1338
        system "php -S localhost:#{port} app.php"
    end

when 'console', 'c'
    system "psysh lib/loader.php"

when 'legacyconsole', 'lc'
    system "php -d auto_prepend_file=lib/loader.php -a"

when 'help', 'h'
	puts "\tUsage $ empathy [option]\n
	n  new      [dir]         - Creates a new project in new dir
	g  generate [type] [name] - Generate controller/c or model/m with name
	d  delete   [type] [name] - Delete controller/c or model/m with name
	   seed                   - Seed database
	   migrate                - Migrate database
	v  version                - Display empathy version
	s  serve                  - Serve app on localhost:port
	c  console                - Interactive conosole (psysh)
	lc legacyconsole          - Interactive console (php -d)\n"
else
    puts "Invalid option"
end
